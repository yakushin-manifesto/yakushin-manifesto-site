---
// Header & Navigation UI displayed on each page.

import LocaleSelect from "@/components/i18n/LocaleSelect.astro";

import { useTranslations, type Lang } from "@/i18n";
import { getRelativeLocaleUrl } from "astro:i18n";
const t = useTranslations(Astro.currentLocale as Lang);

import Hero from '@/components/Hero.astro'
const locale = Astro.currentLocale as Lang;

const isActive = (path: string) =>
  getRelativeLocaleUrl(locale, path) === Astro.url.pathname;
---

<header class="l-header">
  <div class="header-content">
    
      <a href={getRelativeLocaleUrl(locale, "/")} class="logo-link">
        <Hero 
  title={t({
    ja: "翻訳躍進マニフェスト",
    en: "Translation Advancement Manifesto",
    "zh-cn": "翻译进步宣言",
    ko: "번역 진보 선언문"
  })}
  subtitle={t({
    ja: "日本の新たな経済革命の幕開け",
    en: "The Dawn of Japan's New Economic Revolution",
    "zh-cn": "日本新经济革命的开端",
    ko: "일본의 새로운 경제 혁명의 시작"
  })}
/>
        
      </a>

    
  </div>

  <div class="sticky-locale-select">
    <LocaleSelect />
  </div>
</header>

<!-- 
<nav class="l-content">
    <ul>
      <li>
        <a
          href={getRelativeLocaleUrl(locale, "/setup")}
          class={isActive("/setup") ? "active" : null}
        >
          {t({ ja: "設定", en: "Setup", "zh-cn": "设置", ar: "إعداد" })}
        </a>
      </li>

      <li>
        <a
          href={getRelativeLocaleUrl(locale, "/page")}
          class={isActive("/page") ? "active" : null}
        >
          {
            t({
              ja: "ページの追加",
              en: "Add Page",
              "zh-cn": "添加页面",
              ar: "إضافة صفحة",
            })
          }
        </a>
      </li>

      <li>
        <a
          href={getRelativeLocaleUrl(locale, "/feature")}
          class={isActive("/feature") ? "active" : null}
        >
          {
            t({
              ja: "その他の機能",
              en: "Features",
              "zh-cn": "特性",
              ar: "الميزات",
            })
          }
        </a>
      </li>

      <li class="en-only">
        <a
          href={getRelativeLocaleUrl(locale, "/monolingual")}
          class={isActive("/monolingual") ? "active" : null}
        >
          Monolingual
        </a>
      </li>

      <li>
        <a
          href={getRelativeLocaleUrl(locale, "/blog")}
          class={isActive("/blog") ? "active" : null}
        >
          {t({ ja: "ブログ", en: "Blog", "zh-cn": "博客", ar: "مدونة" })}
        </a>
      </li>

      <li>
        <a
          href="https://github.com/psephopaiktes/astro-i18n-starter"
          target="_blank"
        >
          GitHub
          <span class="material-icons-sharp dir">open_in_new</span>
        </a>
      </li>
    </ul>
  </nav>
-->
</header>

<style>
  .l-header {
    position: relative;
    /* background-color: var(--color-background, #ffffff); */
  }

  .header-content {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    max-width: var(--max-width, 1200px);
    padding-inline: var(--sp-m);
    margin: 0 auto;
  }

  .logo-link {
    display: block;
    max-width: 800px; 
    margin: 0 auto;
  }

  .sticky-locale-select {
    position: absolute;
    top: var(--sp-s);
    right: var(--sp-m);
    z-index: 1000;
  }

  @media (max-width: 768px) {
    .sticky-locale-select {
      position: fixed;
    }
  }

  // Adjust header-content to prevent overlap
  .header-content {
    padding-right: calc(var(--sp-m) + 100px); // Adjust based on LocaleSelect width
  }

  h1 {
    margin-block-start: var(--sp-l);
    font-size: 40px;
    font-family: var(--english-font);
    font-weight: 900;
    @media (width < 480px) {
      font-size: 28px;
    }

    a {
      display: flex;
      align-items: center;
    }
    img {
      width: 12em;
      position: relative;
      inset: 0.1em;
    }
  }

  nav {
    display: flex;
    align-items: center;
    gap: var(--sp-m);
  }
  ul {
    display: flex;
    gap: var(--sp-s);
    margin-block-start: var(--sp-s);

    .en-only {
      position: relative;
      &:not(:lang(en))::before {
        content: "EN";
        position: absolute;
        inset: -0.4em -0.6em auto auto;
        font-size: 0.8em;
        font-weight: 900;
        color: var(--color-main);
        opacity: 0.6;
      }
    }

    a {
      font-size: 1.05rem;
      display: block;
      font-weight: 600;
      letter-spacing: 0.05em;
      padding-block: 0.2em;
      padding-inline: 0.4em;
      border-radius: 4px;
      &:hover,
      &:active {
        background-color: color-mix(
          in srgb,
          var(--color-theme) 5%,
          transparent
        );
      }
      &.active {
        pointer-events: none;
        color: var(--color-theme);
      }
      .material-icons-sharp {
        opacity: 0.6;
        margin-inline-start: -0.2em;
        font-size: 0.9em;
      }
    }
  }

  // Adjust header-content to prevent overlap
  .header-content {
    padding-right: calc(var(--sp-m) + 100px); // Adjust based on LocaleSelect width
  }
</style>
